@page "/Order/{Id}"
@using IntusWindowsWeb.Models
@inject HttpClient Http
@inject NavigationManager NavManager
@inject IJSRuntime JsRuntime

<h3>Order</h3>

@if (_order == null)
{
    <p>
        <em>Loading...</em>
    </p>
}

else
{
    <div class="product-detail">
        <h2>@_order.Name</h2>
        <h3>@_order.State</h3>
        <button @onclick="() => NavigateToUpdateOrder(_order.Id)">Update Order</button>
        <button @onclick="ConfirmDelete">Delete Order</button>
        @if (_orderProducts != null)
                {
                    <h3>Products in this order:</h3>
                    <ul>
                        @foreach (var orderProduct in _orderProducts)
                        {
                            <h2>@orderProduct.Name</h2>
                            <p>@orderProduct.Description</p>
                            <p>Price: @orderProduct.Price</p>
                            <p>Type: @orderProduct.Type</p>
                            <p>Width: @orderProduct.Width</p>
                            <p>Height: @orderProduct.Height</p>                            
                        }
                    </ul>
                }
    </div>
}

@code {
    [Parameter] public string Id { get; set; }

    private OrderData? _order;
    private List<ProductData>? _orderProducts;
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            _order = await Http.GetFromJsonAsync<OrderData>($"http://localhost:5145/api/Intus/order/{Id}");
            _orderProducts = await Http.GetFromJsonAsync<List<ProductData>>($"http://localhost:5145/api/Intus/product/{_order.Id}/order");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private void NavigateToUpdateOrder(int orderId)
    {
        NavManager.NavigateTo($"/UpdateOrder/{orderId}");
    }
    
    private async Task DeleteOrder()
    {
        var response = await Http.DeleteAsync($"http://localhost:5145/api/Intus/order/{Id}");

        if (response.IsSuccessStatusCode)
        {
            NavManager.NavigateTo("/Orders");
        }
        else
        {
            Console.WriteLine($"Error: {response.StatusCode}");
        }
    }

    private async Task ConfirmDelete()
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this order?");
        if (confirmed)
        {
            await DeleteOrder();
        }
    }
}