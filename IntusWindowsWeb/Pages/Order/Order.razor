@page "/Order/{Id}"
@using IntusWindowsWeb.Models
@inject HttpClient Http
@inject NavigationManager NavManager
@inject IJSRuntime JsRuntime

<h3>Order</h3>

@if (_order == null)
{
    <p>
        <em>Loading...</em>
    </p>
}

else
{
    <div class="product-detail">
        <h2>Order Name: @_order.Name</h2>
        <h3>Order State: @_order.State</h3>
        <button class="btn-update" @onclick="() => NavigateToUpdateOrder(_order.Id)">Update Order</button>
        <button class="btn-delete" @onclick="ConfirmDelete">Delete Order</button>
        @if (_orderProducts != null)
        {
            <h3>Products in this order:</h3>
            <ul>
                @foreach (var orderProduct in _orderProducts)
                {
                    <div class="product-card order-product-card">

                        <h2>Order Name: @orderProduct.Name</h2>
                        <p>Order: @orderProduct.Description</p>
                        <p>Price: @orderProduct.Price</p>
                        <p>Type: @orderProduct.Type</p>
                        <p>Width: @orderProduct.Width</p>
                        <p>Height: @orderProduct.Height</p>
                    </div>
                }
            </ul>
        }
    </div>
}

@code {
    private const string ApiBase = "intus-web-bruno-perkovic.azurewebsites.net";
    [Parameter] public string Id { get; set; }

    private OrderData? _order;
    private List<ProductData>? _orderProducts;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _order = await Http.GetFromJsonAsync<OrderData>($"https://intus-web-bruno-perkovic.azurewebsites.net/api/intus/order/{Id}");
            _orderProducts = await Http.GetFromJsonAsync<List<ProductData>>($"https://intus-web-bruno-perkovic.azurewebsites.net/api/intus/product/{_order.Id}/order");

            if (_orderProducts == null)
            {
                Console.WriteLine("_orderProducts is null");
            }
            else
            {
                Console.WriteLine(_orderProducts);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private void NavigateToUpdateOrder(int orderId)
    {
        NavManager.NavigateTo($"/UpdateOrder/{orderId}");
    }

    private async Task DeleteOrder()
    {
        var response = await Http.DeleteAsync($"https://intus-web-bruno-perkovic.azurewebsites.net/api/intus/order/{Id}");

        if (response.IsSuccessStatusCode)
        {
            NavManager.NavigateTo("/Orders");
        }
        else
        {
            Console.WriteLine($"Error: {response.StatusCode}");
        }
    }

    private async Task ConfirmDelete()
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this order?");
        if (confirmed)
        {
            await DeleteOrder();
        }
    }

}

}